
// //import "./locationSelector.css"


// import React, { useState } from 'react';
// import { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';
// import "leaflet/dist/leaflet.css";
// import { Icon, divIcon } from 'leaflet';
// // import { MarkerClusterGroup } from 'react-leaflet-cluster'; // Corrected import statement
// import MarkerClusterGroup from 'react-leaflet-markercluster';





// const LocationSelector = () => {
//   const DEFAULT_LANGITUDE = 34.855499
//   const DEFAULT_LATITUDE = 32.109333

//   const [selectedPlace, setSelectedPlace] = useState(null);

//   const handleMapClick = (e) => {
//     const { lat, lng } = e.latlng;
//     setSelectedPlace({ lat, lng });
//   };


//   const markers = [
//     {
//       position: [DEFAULT_LATITUDE, DEFAULT_LANGITUDE],
//       popUp: "hiii"
//     }
//   ]

//   const customIcon = new Icon({
//     iconUrl: "https://cdn-icons-png.flaticon.com/128/2776/2776000.png",
//     iconSize: [38, 38]
//   });

//   const createCustomClusterIcon = (cluster) => {
//     return new divIcon({
//       html: `<div class="cluster-icon">${cluster.getChildCount()}</div>`,
//       className: "custom-marker-cluster",
//       iconSize: PerformanceObserverEntryList(33, 33, true)
//     });
//   }

//   return (
//     <div style={{ width: "300px", height: "300px" }} >
//       <MapContainer
//         center={[DEFAULT_LATITUDE, DEFAULT_LANGITUDE]}
//         zoom={8}
//         style={{ height: '100%', width: '100%', overflow: "hidden" }}
//         onClick={handleMapClick}
//         scrollWheelZoom={true}
//       >
//         <TileLayer
//           url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
//           attribution='&copy; <a href="https://www.openstreetmap.org/copyright">trip planner</a> contributors'
//         />

//         {selectedPlace && (
//           <Marker position={[selectedPlace.lat, selectedPlace.lng]}>

//           </Marker>
//         )}


//         {/* <MarkerClusterGroup 
//         chunkedLoadeing
//         iconCreateFunction={createCustomClusterIcon}
//          > */}

//         {/* <MarkerClusterGroup
//           chunkedLoading
//           iconCreateFunction={createCustomClusterIcon}
//         > */}

//           {markers.map(marker => (
//             <Marker position={marker.position} icon={customIcon}>
//               <Popup>{marker.popUp}</Popup>
//             </Marker>

//           ))}
//           {/* </MarkerClusterGroup> */}
//         {/* </MarkerClusterGroup> */}

//       </MapContainer>
//     </div>
//   );
// };

// export default LocationSelector;




/*********************************** */



// import React, { useState } from 'react';
// import { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';
// import L from 'leaflet';
// import 'leaflet/dist/leaflet.css';
// import 'leaflet.markercluster/dist/MarkerCluster.css';
// import 'leaflet.markercluster/dist/MarkerCluster.Default.css';
// import 'leaflet.markercluster/dist/leaflet.markercluster';

// const LocationSelector = () => {
//   const DEFAULT_LANGITUDE = 34.855499;
//   const DEFAULT_LATITUDE = 32.109333;

//   const [selectedPlace, setSelectedPlace] = useState(null);

//   const handleMapClick = (e) => {
//     const { lat, lng } = e.latlng;
//     setSelectedPlace({ lat, lng });
//   };

//   const markers = [
//     {
//       position: [DEFAULT_LATITUDE, DEFAULT_LANGITUDE],
//       popUp: 'hiii',
//     },
//   ];

//   const customIcon = new L.Icon({
//     iconUrl: 'https://cdn-icons-png.flaticon.com/128/2776/2776000.png',
//     iconSize: new L.Point(38, 38),
//   });

//   return (
//     <div style={{ width: '300px', height: '300px' }}>
//       <MapContainer
//         center={[DEFAULT_LATITUDE, DEFAULT_LANGITUDE]}
//         zoom={8}
//         style={{ height: '100%', width: '100%', overflow: 'hidden' }}
//         onClick={handleMapClick}
//         scrollWheelZoom={true}
//       >
//         <TileLayer
//           url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
//           attribution='&copy; <a href="https://www.openstreetmap.org/copyright">trip planner</a> contributors'
//         />

//         {selectedPlace && (
//           <Marker position={[selectedPlace.lat, selectedPlace.lng]}>
//             {/* ... (unchanged code) */}
//           </Marker>
//         )}

//         <L.MarkerClusterGroup>
//           {markers.map((marker, index) => (
//             <Marker
//               key={index}
//               position={marker.position}
//               icon={customIcon}
//             >
//               <Popup>{marker.popUp}</Popup>
//             </Marker>
//           ))}
//         </L.MarkerClusterGroup>
//       </MapContainer>
//     </div>
//   );
// };

// export default LocationSelector;


//import "./locationSelector.css"




/********** */

// import React, { useState, useEffect } from 'react';
// import { MapContainer, TileLayer, Marker, Popup, useMapEvents } from 'react-leaflet';
// import "leaflet/dist/leaflet.css";
// import { Icon, divIcon } from 'leaflet';

// const LocationSelector = ({ onLocationChange }) => {
//   const DEFAULT_LATITUDE = 34.855499;
//   const DEFAULT_LANGITUDE = 32.109333;

//   const [userLocation, setUserLocation] = useState(null);

//   const markers = [
//     {
//       position: [DEFAULT_LATITUDE, DEFAULT_LANGITUDE],
//       popUp: "hiii",
//     },
//   ];

//   const customIcon = new Icon({
//     iconUrl: "https://cdn-icons-png.flaticon.com/128/2776/2776000.png",
//     iconSize: [38, 38],
//   });

//   useEffect(() => {
//     // Check if the geolocation API is available
//     if ('geolocation' in navigator) {
//       // Get user's current location
//       navigator.geolocation.getCurrentPosition(
//         (position) => {
//           const { latitude, longitude } = position.coords;
//           setUserLocation({ lat: latitude, lng: longitude });
//         },
//         (error) => {
//           console.error('Error getting user location:', error.message);
//         }
//       );
//     } else {
//       console.error('Geolocation is not supported by your browser');
//     }
//   }, []);

//   const handleMapClick = async (event) => {
//     const { lat, lng } = event.latlng;

//     const apiUrl = `https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${lat}&lon=${lng}`;
//     const response = await fetch(apiUrl);
//     const data = await response.json();

//     const streetName = data.address?.road || 'Street name not available';

//     // Call the onLocationChange prop with the clicked location
//     onLocationChange({ lat, lng, streetName });
//   };

//   const ClickHandler = ({ onMapClick }) => {
//     const map = useMapEvents({
//       click: onMapClick,
//     });

//     return null; // This component doesn't render anything, it just attaches the event handler
//   };

//   return (
//     <div style={{ width: "300px", height: "300px" }}>
//       <MapContainer
//         center={[DEFAULT_LATITUDE, DEFAULT_LANGITUDE]}
//         zoom={12}
//         style={{ height: '100%', width: '100%', overflow: "hidden" }}
//         scrollWheelZoom={true}
//       >
//         <TileLayer
//           url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
//           attribution='&copy; <a href="https://www.openstreetmap.org/copyright">trip planner</a> contributors'
//         />

//         {userLocation && (
//           <Marker position={[userLocation.lat, userLocation.lng]} icon={customIcon}>
//             <Popup>You are here!</Popup>
//           </Marker>
//         )}

//         {markers.map((marker, index) => (
//           <Marker key={index} position={marker.position} icon={customIcon}>
//             <Popup>{marker.popUp}</Popup>
//           </Marker>
//         ))}

//         <ClickHandler onMapClick={handleMapClick} />

//       </MapContainer>
//     </div>
//   );
// };

// export default LocationSelector;




import React, { useState } from 'react';
import Box from '@mui/material/Box';
import TextField from '@mui/material/TextField';
import { useNavigate } from 'react-router-dom';
import LocationSelector from '../locationSelector/LocationSelector';

const CreateLandmark = () => {
  const navigate = useNavigate();

  // State to manage form data
  const [formData, setFormData] = useState({
    location: '',
    landmarkName: '',
    description: '',
    startTime: '',
    length: '',
    nextLandmarkId: 0,
  });

  // State to manage clicked location
  const [clickedLocation, setClickedLocation] = useState(null);

  // Handle input changes
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({ ...prevData, [name]: value }));
  };

  // Handle clicked location changes
  const handleLocationChange = (location) => {
    setClickedLocation(location);
    // Update the location input in the form
    setFormData((prevData) => ({ ...prevData, location: `${location.lat.toFixed(4)}, ${location.lng.toFixed(4)}` }));
  };

  // Handle form submission
  const handleSubmit = (e) => {
    e.preventDefault();
    console.log('Form data submitted:', formData);
    // Reset form data
    setFormData({
      location: '',
      landmarkName: '',
      description: '',
      startTime: '',
      length: '',
      nextLandmarkId: 0,
    });
  };

  return (
    <Box
      component="form"
      sx={{
        '& .MuiTextField-root': { m: 1, width: '25ch' },
      }}
      noValidate
      autoComplete="off"
    >
      <div>
        <TextField
          id="outlined-multiline-flexible"
          label="Landmark Name"
          multiline
          value={formData.landmarkName}
          onChange={handleInputChange}
        />
        <br />
        <TextField
          id="outlined-multiline-static"
          label="Location"
          multiline
          value={formData.location}
          onChange={handleInputChange}
        />
        <br />
        <TextField
          id="outlined-textarea"
          label="Description"
          placeholder="Description"
          multiline
          value={formData.description}
          onChange={handleInputChange}
        />
        <br />
        <TextField
          id="outlined-multiline-static"
          label="Start Time"
          multiline
          value={formData.startTime}
          onChange={handleInputChange}
        />
        <br />
        <TextField
          id="outlined-multiline-static"
          label="Length"
          multiline
          value={formData.length}
          onChange={handleInputChange}
        />
        <br />
        <LocationSelector onLocationChange={handleLocationChange} />
        <button type="submit" onClick={handleSubmit}>
          Create Landmark
        </button>
      </div>
    </Box>
  );
};

export default CreateLandmark;

